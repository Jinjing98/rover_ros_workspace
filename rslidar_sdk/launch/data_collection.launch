<launch>

<!--<node name="runtime_benchmark" pkg="rslidar_pointcloud" type="roslaunch_kill.sh" /> !-->
<!--the dummy node to start the radar data collection!-->

  <node pkg="strata_radar" name="dummynode4radar" type="dummy.py" output="screen" args="30">
  </node>

<!--the range dop node from radar!-->
  <node pkg="strata_radar" name="range_dop_node" type="strata_RangeDoppler.py" output="screen">
  </node>

<!--   another node from radar: time data -->
<!--<node pkg="strata_radar" name="tiemdata_node" type="strata_Timedata.py" output="screen">-->
<!--</node>-->

<!-- by this tf publihser, we can connect the rslidar frame with respect to the system of zed-->
  <node pkg="tf" name="static_transform_publisher" type="static_transform_publisher" args="-0.04 -0.63 0.05 0 0 0 1  zed2_left_camera_frame rslidar 100" output="screen">
  </node>

  <node pkg="rslidar_sdk" name="rslidar_sdk_node" type="rslidar_sdk_node" args="/home/tud-jxavier/catkin_ws/src/rslidar_sdk/config/config_ori_data_collection.yaml" output="screen">
  </node>

  <!-- rviz , this is for really carrying out OD-->
  <node pkg="rviz" name="rviz" type="rviz" args="-d /home/tud-jxavier/catkin_ws/src/handy_rviz/rviz_manset_jinjing_nodelet.rviz" />




<!--scan from rslidar, the args for publisher can set yourself!-->

  <node pkg="rslidar_pointcloud" name="distance_scan_publisher" type="distance_scan_publisher.py" output="screen" args="80 80">
  </node>

  <node pkg="rslidar_pointcloud" name="distance_scan_listener" type="listen_distance_scan.py" output="screen">
  </node>


<!--we remain the frame drop manner pcd file collections, since they are properly saved and can be read properly with vim -->


<!--pointcloud data we will collect with .pcd file, so we use pcl_ros pkg defined node here!-->

  <node pkg="pcl_ros" name="pcd_collector" type="pointcloud_to_pcd" output="screen"  args = "input:=/rslidar_points _prefix:=/media/tud-jxavier/SSD/data/rslidar/Pointcloud/">
  </node>

<!--document the poses of point cloud frame /rslidar with respect to the map frame, i.e wrt the frame /map -->
<!--<node pkg="rslidar_pointcloud" name="rslidar_map_transform_listener" type="listen_rslidar_map_transform.py" output="screen">-->
<!--</node>-->





<!--pointcloud data FROM ZED we will collect with .pcd file, so we use pcl_ros pkg defined node here!-->

  <node pkg="pcl_ros" name="pcd_collector_ZED" type="pointcloud_to_pcd" output="screen"  args = "input:=/zed2/zed_nodelet/point_cloud/cloud_registered
 _prefix:=/media/tud-jxavier/SSD/data/zed/point_cloud/">
  </node>














<!--maybe we need to change to ros bag for pcd data collection -->
<!--  <node name="ZED_PCD_rosbag_recorder" pkg="rosbag" type="record" args="-O /media/tud-jxavier/SSD/data/bagdata/ZED_PCD.bag   /zed2/zed_nodelet/point_cloud/cloud_registered ">
  </node>

  <node name="rslidar_PCD_rosbag_recorder" pkg="rosbag" type="record" args="-O /media/tud-jxavier/SSD/data/bagdata/rslidar_PCD.bag   /rslidar_points ">
  </node>
--> 

 











<!--img,imu,obj list,pose_twist of rover-->

  <node pkg="zed_wrapper" name="img_listener" type="image_listener.py" output="screen">
  </node>

  <node pkg="zed_wrapper" name="imu_listener" type="imu_listener.py" output="screen">
  </node>

  <node pkg="zed_wrapper" name="obj_listener" type="obj_listener.py" output="screen">
  </node>

  <node pkg="rr_openrover_driver" name="pose_twist_listener" type="pose_twist_listener.py" output="screen">
  </node>







<!--to visulise the OD bounding box offline in rviz, the only choice is record certain topics via rosbag, refer to google doc note!-->
<!--$ rosbag record -o /media/tud-jxavier/SSD/data/bagdata/OD   /rosout /tf /tf_static /zed2/zed_nodelet/left/image_rect_color /zed2/zed_nodelet/left/camera_info /zed2/zed_nodelet/point_cloud/cloud_registered /zed2/zed_nodelet/obj_det/object_markers-->  
 
<!--  <node name="OD_rosbag_recorder" pkg="rosbag" type="record"
      args="-O /media/tud-jxavier/SSD/data/bagdata/OD.bag   /rosout /tf /tf_static /zed2/zed_nodelet/left/image_rect_color /zed2/zed_nodelet/left/camera_info /zed2/zed_nodelet/point_cloud/cloud_registered /zed2/zed_nodelet/obj_det/object_markers "/>
-->

  <node name="OD_rslidar_rosbag_recorder" pkg="rosbag" type="record"
      args="-O /media/tud-jxavier/SSD/data/bagdata/OD_rslidar_zedpcd.bag   /rosout /tf /tf_static /zed2/zed_nodelet/left/image_rect_color /zed2/zed_nodelet/left/camera_info /zed2/zed_nodelet/point_cloud/cloud_registered /zed2/zed_nodelet/obj_det/object_markers  /rslidar_points "/>





<!--   zed and rslidar point cloud directory cleaner , we need to do it manually if needed-->

<!--
  <node pkg="rslidar_pointcloud" name="dummy_rslidar_pcd_cleaner" type="pointcloud_dir_cleaner_rslidar.py" output="screen">
  </node>


  <node pkg="zed_wrapper" name="dummy_zed_pcd_cleaner" type="pointcloud_dir_cleaner_zed.py" output="screen">
  </node>

-->







</launch>
