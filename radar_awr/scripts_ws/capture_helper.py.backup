# -*- coding: utf-8 -*-
"""
Created on Wed Jul 31 09:58:59 2019

@author: trosmeisl, hagonzalezd
"""
import socket
import time
import multiprocessing as mp
import struct
import sys
import traceback

import numpy as np
import adc as dl

class Parameters:
    def __init__(self, adc_params=(128, 4, 2, 256, 2, 2),
                 sensor_params=(1.5351e9, 77e9, 60e-6, 48e-6),
                 dsp_params=("HANNING", "HANNING", None),
                 plot_params=("rd", 50000, 50000, 30000),
                 general_params=()):
        """
        adc_params: (chirps, recievers, transmitters, samples, bytes per sample, inphase-quadrature)
        sensor_params: (radar bandwidth, carrier frequency, chirp time active, chirp time idle)
        dsp_params: (range window, doppler window, other window, hadamard)
        plot_params: (plots, norm rc, norm rd, norm md)
        general_params: ()
        """

        self.FTL = 3e8
        self.params_dict = {"chirps": adc_params[0],
                            "rx": adc_params[1],
                            "tx": adc_params[2],
                            "samples": adc_params[3],
                            "IQ": adc_params[5],
                            "b": adc_params[4],
                            "rangewin": dsp_params[0],
                            "dopplerwin": dsp_params[1]}
        self.params_dict.update({"channels": self.params_dict["rx"] * self.params_dict["tx"],
                                 "range": self.params_dict["chirps"] // self.params_dict["tx"],
                                 "doppler": self.params_dict["samples"] // 2})

    def get(self, key):
        return self.params_dict[key]


def recording(data_pipe, dca, params):
    #frames = np.zeros((128, params.get("chirps"), params.get("rx"), params.get("samples")))
    counter = 0
    while(True):
        try:
            print("trying to read from sensor")
            real_frame, im_frame = dca.organize_ros(dca.read(2), params.get("chirps"), params.get("rx"), params.get("samples"))
            real_frame = dl.seperate_old(real_frame, params.get("tx"))
            im_frame = dl.seperate_old(im_frame, params.get("tx"))
        except:
            dca.close()
            print("socket timed out")
            break
        data_pipe.put((real_frame, im_frame))
        print("frame", counter, "captured and send, lost packets:", dca.lost_packets)
        counter += 1


def radar_capture():
    # TODO: kwarg or CLI
    #plots = ("range_chirp", "range_doppler") # or None
    plots = None

    dca = dl.DCA1000()
    dca.configure()

    # maybe implement the basic parameters as kwarg
    adc_params = Parameters()
    
    dsp_pipe_rec = mp.Queue(0)
    
    print("CPU cores: ", mp.cpu_count())
    try:
        proc_rec = mp.Process(target = recording, name="proc_recording", args=(dsp_pipe_rec, dca, adc_params))
    except:
        print(traceback.format_exc())
        print("creation of process went wrong")
    return proc_rec, dsp_pipe_rec

def terminate_proc(proc, queue):
    queue.close()
    proc.terminate()
    proc.join()
    print("Process and Queue have terminated properly")
    
